{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to HealthStack Project Layout 1 mkdocs.yml # The configuration file of HealthStack. docs/ index.md # This document is about the overview of our website ( Services we provide through our website). hospital.md # Documantation of our websites' multiple hospital information, availabe doctors information. Lab_worker.md # Documentation of a lab worker's services in our website. Pharmacist.md # Documentation of a pharmacists' services in our website. hospital_admin # Documentation of a hospital admin's services in our website. doctor.md # Documentation of a doctor's services in our website. patient.md # Documentation of the services a patient avail from our website. Overview of Our Project Healthstack is an internet platform that supports numerous hospitals. It offers urgent medical aid to those in need of emergency care. Its capability of tracking, monitoring, and sharing a patient's health records across all hospitals. Patients can also view information about various hospitals and providers and schedule appointments online. Fetures Doctor Profile Multiple Hospital Online Appointment Presctiption,Test Report Pharmacy Online Chat Online Payment Mail","title":"Welcome"},{"location":"#welcome-to-healthstack","text":"","title":"Welcome to HealthStack"},{"location":"#project-layout-1","text":"mkdocs.yml # The configuration file of HealthStack. docs/ index.md # This document is about the overview of our website ( Services we provide through our website). hospital.md # Documantation of our websites' multiple hospital information, availabe doctors information. Lab_worker.md # Documentation of a lab worker's services in our website. Pharmacist.md # Documentation of a pharmacists' services in our website. hospital_admin # Documentation of a hospital admin's services in our website. doctor.md # Documentation of a doctor's services in our website. patient.md # Documentation of the services a patient avail from our website.","title":"Project Layout 1"},{"location":"#overview-of-our-project","text":"Healthstack is an internet platform that supports numerous hospitals. It offers urgent medical aid to those in need of emergency care. Its capability of tracking, monitoring, and sharing a patient's health records across all hospitals. Patients can also view information about various hospitals and providers and schedule appointments online.","title":"Overview of Our Project"},{"location":"#fetures","text":"Doctor Profile Multiple Hospital Online Appointment Presctiption,Test Report Pharmacy Online Chat Online Payment Mail","title":"Fetures"},{"location":"Lab_worker/","text":"Lab Worker What does a laboratory Worker do A lab tech is a person who performs the practical hands-on work in laboratories. Laboratory technicians have a wide range of responsibilities that might vary depending on their particular laboratory setting. These day-to-day tasks may include: Collecting samples of blood and other substances Performing lab tests on samples and analyzing results Ensuring quality control of samples Adhering to a laboratory\u2019s standards and policies Preparing samples and processing them as needed Logging test results into patients\u2019 medical records Report Creation By Lab Worker def create_report(request, pk): if request.user.is_labworker: lab_workers = Clinical_Laboratory_Technician.objects.get(user=request.user) prescription =Prescription.objects.get(prescription_id=pk) patient = Patient.objects.get(patient_id=prescription.patient_id) doctor = Doctor_Information.objects.get(doctor_id=prescription.doctor_id) tests = Prescription_test.objects.filter(prescription=prescription).filter(test_info_pay_status='Paid') if request.method == 'POST': report = Report(doctor=doctor, patient=patient) specimen_type = request.POST.getlist('specimen_type') collection_date = request.POST.getlist('collection_date') receiving_date = request.POST.getlist('receiving_date') test_name = request.POST.getlist('test_name') result = request.POST.getlist('result') unit = request.POST.getlist('unit') referred_value = request.POST.getlist('referred_value') delivery_date = request.POST.get('delivery_date') other_information= request.POST.get('other_information') report.delivery_date = delivery_date report.other_information = other_information report.save() for i in range(len(specimen_type)): specimens = Specimen(report=report) specimens.specimen_type = specimen_type[i] specimens.collection_date = collection_date[i] specimens.receiving_date = receiving_date[i] specimens.save() for i in range(len(test_name)): tests = Test(report=report) tests.test_name=test_name[i] tests.result=result[i] tests.unit=unit[i] tests.referred_value=referred_value[i] tests.save() return redirect('mypatient-list') context = {'prescription':prescription,'lab_workers':lab_workers,'tests':tests} return render(request, 'hospital_admin/create-report.html',context) Lab Worker Dashboard This is the dasboard of the lab worker. Pending Report List Create Test Form Viewing Test List","title":"Labworker"},{"location":"Lab_worker/#lab-worker","text":"","title":"Lab Worker"},{"location":"Lab_worker/#what-does-a-laboratory-worker-do","text":"A lab tech is a person who performs the practical hands-on work in laboratories. Laboratory technicians have a wide range of responsibilities that might vary depending on their particular laboratory setting. These day-to-day tasks may include: Collecting samples of blood and other substances Performing lab tests on samples and analyzing results Ensuring quality control of samples Adhering to a laboratory\u2019s standards and policies Preparing samples and processing them as needed Logging test results into patients\u2019 medical records","title":"What does a laboratory Worker do"},{"location":"Lab_worker/#report-creation-by-lab-worker","text":"def create_report(request, pk): if request.user.is_labworker: lab_workers = Clinical_Laboratory_Technician.objects.get(user=request.user) prescription =Prescription.objects.get(prescription_id=pk) patient = Patient.objects.get(patient_id=prescription.patient_id) doctor = Doctor_Information.objects.get(doctor_id=prescription.doctor_id) tests = Prescription_test.objects.filter(prescription=prescription).filter(test_info_pay_status='Paid') if request.method == 'POST': report = Report(doctor=doctor, patient=patient) specimen_type = request.POST.getlist('specimen_type') collection_date = request.POST.getlist('collection_date') receiving_date = request.POST.getlist('receiving_date') test_name = request.POST.getlist('test_name') result = request.POST.getlist('result') unit = request.POST.getlist('unit') referred_value = request.POST.getlist('referred_value') delivery_date = request.POST.get('delivery_date') other_information= request.POST.get('other_information') report.delivery_date = delivery_date report.other_information = other_information report.save() for i in range(len(specimen_type)): specimens = Specimen(report=report) specimens.specimen_type = specimen_type[i] specimens.collection_date = collection_date[i] specimens.receiving_date = receiving_date[i] specimens.save() for i in range(len(test_name)): tests = Test(report=report) tests.test_name=test_name[i] tests.result=result[i] tests.unit=unit[i] tests.referred_value=referred_value[i] tests.save() return redirect('mypatient-list') context = {'prescription':prescription,'lab_workers':lab_workers,'tests':tests} return render(request, 'hospital_admin/create-report.html',context)","title":"Report Creation By Lab Worker"},{"location":"Lab_worker/#lab-worker-dashboard","text":"This is the dasboard of the lab worker.","title":"Lab Worker Dashboard"},{"location":"Lab_worker/#pending-report-list","text":"","title":"Pending Report List"},{"location":"Lab_worker/#create-test-form","text":"","title":"Create Test Form"},{"location":"Lab_worker/#viewing-test-list","text":"","title":"Viewing Test List"},{"location":"Pharmacist/","text":"Welcome to Pharmacist The main duties of a pharmacist includes: Administrative tasks such as add medicines information. Edit medicine information. Delete medicine information. Search medicine. View Medicine information. Add medicines into database def add_medicine(request): if request.user.is_pharmacist: user = Pharmacist.objects.get(user=request.user) if request.method == 'POST': medicine = Medicine() if 'featured_image' in request.FILES: featured_image = request.FILES['featured_image'] else: featured_image = \"medicines/default.png\" name = request.POST.get('name') Prescription_reqiuired = request.POST.get('requirement_type') weight = request.POST.get('weight') quantity = request.POST.get('quantity') medicine_category = request.POST.get('category_type') medicine_type = request.POST.get('medicine_type') description = request.POST.get('description') price = request.POST.get('price') medicine.name = name medicine.Prescription_reqiuired = Prescription_reqiuired medicine.weight = weight medicine.quantity = quantity medicine.medicine_category = medicine_category medicine.medicine_type = medicine_type medicine.description = description medicine.price = price medicine.featured_image = featured_image medicine.stock_quantity = 80 #medicine.medicine_id = generate_random_medicine_ID() medicine.save() return redirect('medicine-list') return render(request, 'hospital_admin/add-medicine.html',{'admin': user}) Medicine Table","title":"Pharmacist"},{"location":"Pharmacist/#welcome-to-pharmacist","text":"","title":"Welcome to Pharmacist"},{"location":"Pharmacist/#the-main-duties-of-a-pharmacist-includes","text":"Administrative tasks such as add medicines information. Edit medicine information. Delete medicine information. Search medicine. View Medicine information.","title":"The main duties of a pharmacist includes:"},{"location":"Pharmacist/#add-medicines-into-database","text":"def add_medicine(request): if request.user.is_pharmacist: user = Pharmacist.objects.get(user=request.user) if request.method == 'POST': medicine = Medicine() if 'featured_image' in request.FILES: featured_image = request.FILES['featured_image'] else: featured_image = \"medicines/default.png\" name = request.POST.get('name') Prescription_reqiuired = request.POST.get('requirement_type') weight = request.POST.get('weight') quantity = request.POST.get('quantity') medicine_category = request.POST.get('category_type') medicine_type = request.POST.get('medicine_type') description = request.POST.get('description') price = request.POST.get('price') medicine.name = name medicine.Prescription_reqiuired = Prescription_reqiuired medicine.weight = weight medicine.quantity = quantity medicine.medicine_category = medicine_category medicine.medicine_type = medicine_type medicine.description = description medicine.price = price medicine.featured_image = featured_image medicine.stock_quantity = 80 #medicine.medicine_id = generate_random_medicine_ID() medicine.save() return redirect('medicine-list') return render(request, 'hospital_admin/add-medicine.html',{'admin': user})","title":"Add medicines into database"},{"location":"Pharmacist/#medicine-table","text":"","title":"Medicine Table"},{"location":"doctor/","text":"Welcome to Doctor We have developed a convenient doctor/patient interface to bring you a service that allows you to have a medical consultation. The main duties of a Doctor : Accept or appointments from patients. View patient profile after accepting appointments. Can register himself to a specific hospital. Search patients. Create prescription. Sending mail to the patient about appointment confirmation. Chat with patient. Doctor Profile settings. Accepting Appointments of patients def accept_appointment(request, pk): appointment = Appointment.objects.get(id=pk) appointment.appointment_status = 'confirmed' appointment.save() patient_email = appointment.patient.email patient_name = appointment.patient.name patient_username = appointment.patient.username patient_serial_number = appointment.patient.serial_number doctor_name = appointment.doctor.name appointment_serial_number = appointment.serial_number appointment_date = appointment.date appointment_time = appointment.time appointment_status = appointment.appointment_status subject = \"Appointment Acceptance Email\" values = { \"email\":patient_email, \"name\":patient_name, \"username\":patient_username, \"serial_number\":patient_serial_number, \"doctor_name\":doctor_name, \"appointment_serial_num\":appointment_serial_number, \"appointment_date\":appointment_date, \"appointment_time\":appointment_time, \"appointment_status\":appointment_status, } html_message = render_to_string('appointment_accept_mail.html', {'values': values}) plain_message = strip_tags(html_message) try: send_mail(subject, plain_message, 'hospital_admin@gmail.com', [patient_email], html_message=html_message, fail_silently=False) except BadHeaderError: return HttpResponse('Invalid header found') messages.success(request, 'Appointment Accepted') return redirect('doctor-dashboard') Doctor Dashboard Doctor Profile Search Hospital Search Patients def patient_search(request, pk): if request.user.is_authenticated and request.user.is_doctor: doctor = Doctor_Information.objects.get(doctor_id=pk) id = int(request.GET['search_query']) patient = Patient.objects.get(patient_id=id) prescription = Prescription.objects.filter(doctor=doctor).filter(patient=patient) context = {'patient': patient, 'doctor': doctor, 'prescription': prescription} return render(request, 'patient-profile.html', context) else: logout(request) messages.info(request, 'Not Authorized') return render(request, 'doctor-login.html') Create Prescription def create_prescription(request,pk): if request.user.is_doctor: doctor = Doctor_Information.objects.get(user=request.user) patient = Patient.objects.get(patient_id=pk) create_date = datetime.date.today() if request.method == 'POST': prescription = Prescription(doctor=doctor, patient=patient) test_name= request.POST.getlist('test_name') test_description = request.POST.getlist('description') medicine_name = request.POST.getlist('medicine_name') medicine_quantity = request.POST.getlist('quantity') medecine_frequency = request.POST.getlist('frequency') medicine_duration = request.POST.getlist('duration') medicine_relation_with_meal = request.POST.getlist('relation_with_meal') medicine_instruction = request.POST.getlist('instruction') extra_information = request.POST.get('extra_information') test_info_id = request.POST.getlist('id') prescription.extra_information = extra_information prescription.create_date = create_date prescription.save() for i in range(len(medicine_name)): medicine = Prescription_medicine(prescription=prescription) medicine.medicine_name = medicine_name[i] medicine.quantity = medicine_quantity[i] medicine.frequency = medecine_frequency[i] medicine.duration = medicine_duration[i] medicine.instruction = medicine_instruction[i] medicine.relation_with_meal = medicine_relation_with_meal[i] medicine.save() for i in range(len(test_name)): tests = Prescription_test(prescription=prescription) tests.test_name = test_name[i] tests.test_description = test_description[i] tests.test_info_id = test_info_id[i] test_info = Test_Information.objects.get(test_id=test_info_id[i]) tests.test_info_price = test_info.test_price tests.save() messages.success(request, 'Prescription Created') return redirect('patient-profile', pk=patient.patient_id) context = {'doctor': doctor,'patient': patient} return render(request, 'create-prescription.html',context) Profile Settings","title":"Doctor Dashboard"},{"location":"doctor/#welcome-to-doctor","text":"We have developed a convenient doctor/patient interface to bring you a service that allows you to have a medical consultation.","title":"Welcome to Doctor"},{"location":"doctor/#the-main-duties-of-a-doctor","text":"Accept or appointments from patients. View patient profile after accepting appointments. Can register himself to a specific hospital. Search patients. Create prescription. Sending mail to the patient about appointment confirmation. Chat with patient. Doctor Profile settings.","title":"The main duties of a Doctor :"},{"location":"doctor/#accepting-appointments-of-patients","text":"def accept_appointment(request, pk): appointment = Appointment.objects.get(id=pk) appointment.appointment_status = 'confirmed' appointment.save() patient_email = appointment.patient.email patient_name = appointment.patient.name patient_username = appointment.patient.username patient_serial_number = appointment.patient.serial_number doctor_name = appointment.doctor.name appointment_serial_number = appointment.serial_number appointment_date = appointment.date appointment_time = appointment.time appointment_status = appointment.appointment_status subject = \"Appointment Acceptance Email\" values = { \"email\":patient_email, \"name\":patient_name, \"username\":patient_username, \"serial_number\":patient_serial_number, \"doctor_name\":doctor_name, \"appointment_serial_num\":appointment_serial_number, \"appointment_date\":appointment_date, \"appointment_time\":appointment_time, \"appointment_status\":appointment_status, } html_message = render_to_string('appointment_accept_mail.html', {'values': values}) plain_message = strip_tags(html_message) try: send_mail(subject, plain_message, 'hospital_admin@gmail.com', [patient_email], html_message=html_message, fail_silently=False) except BadHeaderError: return HttpResponse('Invalid header found') messages.success(request, 'Appointment Accepted') return redirect('doctor-dashboard')","title":"Accepting Appointments of patients"},{"location":"doctor/#doctor-dashboard","text":"","title":"Doctor Dashboard"},{"location":"doctor/#doctor-profile","text":"","title":"Doctor Profile"},{"location":"doctor/#search-hospital","text":"","title":"Search Hospital"},{"location":"doctor/#search-patients","text":"def patient_search(request, pk): if request.user.is_authenticated and request.user.is_doctor: doctor = Doctor_Information.objects.get(doctor_id=pk) id = int(request.GET['search_query']) patient = Patient.objects.get(patient_id=id) prescription = Prescription.objects.filter(doctor=doctor).filter(patient=patient) context = {'patient': patient, 'doctor': doctor, 'prescription': prescription} return render(request, 'patient-profile.html', context) else: logout(request) messages.info(request, 'Not Authorized') return render(request, 'doctor-login.html')","title":"Search Patients"},{"location":"doctor/#create-prescription","text":"def create_prescription(request,pk): if request.user.is_doctor: doctor = Doctor_Information.objects.get(user=request.user) patient = Patient.objects.get(patient_id=pk) create_date = datetime.date.today() if request.method == 'POST': prescription = Prescription(doctor=doctor, patient=patient) test_name= request.POST.getlist('test_name') test_description = request.POST.getlist('description') medicine_name = request.POST.getlist('medicine_name') medicine_quantity = request.POST.getlist('quantity') medecine_frequency = request.POST.getlist('frequency') medicine_duration = request.POST.getlist('duration') medicine_relation_with_meal = request.POST.getlist('relation_with_meal') medicine_instruction = request.POST.getlist('instruction') extra_information = request.POST.get('extra_information') test_info_id = request.POST.getlist('id') prescription.extra_information = extra_information prescription.create_date = create_date prescription.save() for i in range(len(medicine_name)): medicine = Prescription_medicine(prescription=prescription) medicine.medicine_name = medicine_name[i] medicine.quantity = medicine_quantity[i] medicine.frequency = medecine_frequency[i] medicine.duration = medicine_duration[i] medicine.instruction = medicine_instruction[i] medicine.relation_with_meal = medicine_relation_with_meal[i] medicine.save() for i in range(len(test_name)): tests = Prescription_test(prescription=prescription) tests.test_name = test_name[i] tests.test_description = test_description[i] tests.test_info_id = test_info_id[i] test_info = Test_Information.objects.get(test_id=test_info_id[i]) tests.test_info_price = test_info.test_price tests.save() messages.success(request, 'Prescription Created') return redirect('patient-profile', pk=patient.patient_id) context = {'doctor': doctor,'patient': patient} return render(request, 'create-prescription.html',context)","title":"Create Prescription"},{"location":"doctor/#profile-settings","text":"","title":"Profile Settings"},{"location":"hospital/","text":"Welcome to Home Page of our Website Homepage Departments and Specialization About our Doctor Avaiable Hospital","title":"Homepage"},{"location":"hospital/#welcome-to-home-page-of-our-website","text":"","title":"Welcome to Home Page of our Website"},{"location":"hospital/#homepage","text":"","title":"Homepage"},{"location":"hospital/#departments-and-specialization","text":"","title":"Departments and Specialization"},{"location":"hospital/#about-our-doctor","text":"","title":"About our Doctor"},{"location":"hospital/#avaiable-hospital","text":"","title":"Avaiable Hospital"},{"location":"hospital_admin/","text":"Welcome To Hospital Admin Hospital Admin is a cruical User for our project. Hospital Admin Task Accept / Reject Doctor Add and View Labworker Add and View Pharmacist Add,Edit and View Hospital Update Hospital Information Accept/Reject doctor def accept_doctor(request,pk): doctor = Doctor_Information.objects.get(doctor_id=pk) doctor.register_status = 'Accepted' doctor.save() experience= Experience.objects.filter(doctor_id=pk) education = Education.objects.filter(doctor_id=pk) # Mailtrap doctor_name = doctor.name doctor_email = doctor.email doctor_department = doctor.department_name.hospital_department_name doctor_specialization = doctor.specialization.specialization_name subject = \"Acceptance of Doctor Registration\" values = { \"doctor_name\":doctor_name, \"doctor_email\":doctor_email, \"doctor_department\":doctor_department, \"doctor_specialization\":doctor_specialization, } html_message = render_to_string('hospital_admin/accept-doctor-mail.html', {'values': values}) plain_message = strip_tags(html_message) try: send_mail(subject, plain_message, 'hospital_admin@gmail.com', [doctor_email], html_message=html_message, fail_silently=False) except BadHeaderError: return HttpResponse('Invalid header found') messages.success(request, 'Doctor Accepted!') return redirect('register-doctor-list') def reject_doctor(request,pk): doctor = Doctor_Information.objects.get(doctor_id=pk) doctor.register_status = 'Rejected' doctor.save() # Mailtrap doctor_name = doctor.name doctor_email = doctor.email doctor_department = doctor.department_name.hospital_department_name doctor_hospital = doctor.hospital_name.name doctor_specialization = doctor.specialization.specialization_name subject = \"Rejection of Doctor Registration\" values = { \"doctor_name\":doctor_name, \"doctor_email\":doctor_email, \"doctor_department\":doctor_department, \"doctor_hospital\":doctor_hospital, \"doctor_specialization\":doctor_specialization, } html_message = render_to_string('hospital_admin/reject-doctor-mail.html', {'values': values}) plain_message = strip_tags(html_message) try: send_mail(subject, plain_message, 'hospital_admin@gmail.com', [doctor_email], html_message=html_message, fail_silently=False) except BadHeaderError: return HttpResponse('Invalid header found') messages.success(request, 'Doctor Rejected!') return redirect('register-doctor-list') Add and View Labworker def add_lab_worker(request): if request.user.is_hospital_admin: user = Admin_Information.objects.get(user=request.user) form = LabWorkerCreationForm() if request.method == 'POST': form = LabWorkerCreationForm(request.POST) if form.is_valid(): # form.save(), commit=False --> don't save to database yet (we have a chance to modify object) user = form.save(commit=False) user.is_labworker = True user.save() messages.success(request, 'Clinical Laboratory Technician account was created!') # After user is created, we can log them in #login(request, user) return redirect('lab-worker-list') else: messages.error(request, 'An error has occurred during registration') context = {'form': form, 'admin': user} return render(request, 'hospital_admin/add-lab-worker.html', context) Add and View Pharmacist def add_pharmacist(request): if request.user.is_hospital_admin: user = Admin_Information.objects.get(user=request.user) form = PharmacistCreationForm() if request.method == 'POST': form = PharmacistCreationForm(request.POST) if form.is_valid(): # form.save(), commit=False --> don't save to database yet (we have a chance to modify object) user = form.save(commit=False) user.is_pharmacist = True user.save() messages.success(request, 'Pharmacist account was created!') # After user is created, we can log them in #login(request, user) return redirect('pharmacist-list') else: messages.error(request, 'An error has occurred during registration') context = {'form': form, 'admin': user} return render(request, 'hospital_admin/add-pharmacist.html', context) Add,Edit and View Hospital def add_hospital(request): if request.user.is_hospital_admin: user = Admin_Information.objects.get(user=request.user) if request.method == 'POST': hospital = Hospital_Information() if 'featured_image' in request.FILES: featured_image = request.FILES['featured_image'] else: featured_image = \"departments/default.png\" hospital_name = request.POST.get('hospital_name') address = request.POST.get('address') description = request.POST.get('description') email = request.POST.get('email') phone_number = request.POST.get('phone_number') hospital_type = request.POST.get('type') specialization_name = request.POST.getlist('specialization') department_name = request.POST.getlist('department') service_name = request.POST.getlist('service') hospital.name = hospital_name hospital.description = description hospital.address = address hospital.email = email hospital.phone_number =phone_number hospital.featured_image=featured_image hospital.hospital_type=hospital_type # print(department_name[0]) hospital.save() for i in range(len(department_name)): departments = hospital_department(hospital=hospital) # print(department_name[i]) departments.hospital_department_name = department_name[i] departments.save() for i in range(len(specialization_name)): specializations = specialization(hospital=hospital) specializations.specialization_name=specialization_name[i] specializations.save() for i in range(len(service_name)): services = service(hospital=hospital) services.service_name = service_name[i] services.save() messages.success(request, 'Hospital Added') return redirect('hospital-list') context = { 'admin': user} return render(request, 'hospital_admin/add-hospital.html',context) Edit Hospital Information def edit_hospital(request, pk): if request.user.is_hospital_admin: user = Admin_Information.objects.get(user=request.user) hospital = Hospital_Information.objects.get(hospital_id=pk) old_featured_image = hospital.featured_image if request.method == 'GET': specializations = specialization.objects.filter(hospital=hospital) services = service.objects.filter(hospital=hospital) departments = hospital_department.objects.filter(hospital=hospital) context = {'hospital': hospital, 'specializations': specializations, 'services': services,'departments':departments, 'admin': user} return render(request, 'hospital_admin/edit-hospital.html',context) elif request.method == 'POST': if 'featured_image' in request.FILES: featured_image = request.FILES['featured_image'] else: featured_image = old_featured_image hospital_name = request.POST.get('hospital_name') address = request.POST.get('address') description = request.POST.get('description') email = request.POST.get('email') phone_number = request.POST.get('phone_number') hospital_type = request.POST.get('type') specialization_name = request.POST.getlist('specialization') department_name = request.POST.getlist('department') service_name = request.POST.getlist('service') hospital.name = hospital_name hospital.description = description hospital.address = address hospital.email = email hospital.phone_number =phone_number hospital.featured_image =featured_image hospital.hospital_type =hospital_type # specializations.specialization_name=specialization_name # services.service_name = service_name # departments.hospital_department_name = department_name hospital.save() # Specialization for i in range(len(specialization_name)): specializations = specialization(hospital=hospital) specializations.specialization_name = specialization_name[i] specializations.save() # Experience for i in range(len(service_name)): services = service(hospital=hospital) services.service_name = service_name[i] services.save() for i in range(len(department_name)): departments = hospital_department(hospital=hospital) departments.hospital_department_name = department_name[i] departments.save() messages.success(request, 'Hospital Updated') return redirect('hospital-list')","title":"Hospital Admin"},{"location":"hospital_admin/#welcome-to-hospital-admin","text":"Hospital Admin is a cruical User for our project.","title":"Welcome To Hospital Admin"},{"location":"hospital_admin/#hospital-admin-task","text":"Accept / Reject Doctor Add and View Labworker Add and View Pharmacist Add,Edit and View Hospital Update Hospital Information","title":"Hospital Admin Task"},{"location":"hospital_admin/#acceptreject-doctor","text":"def accept_doctor(request,pk): doctor = Doctor_Information.objects.get(doctor_id=pk) doctor.register_status = 'Accepted' doctor.save() experience= Experience.objects.filter(doctor_id=pk) education = Education.objects.filter(doctor_id=pk) # Mailtrap doctor_name = doctor.name doctor_email = doctor.email doctor_department = doctor.department_name.hospital_department_name doctor_specialization = doctor.specialization.specialization_name subject = \"Acceptance of Doctor Registration\" values = { \"doctor_name\":doctor_name, \"doctor_email\":doctor_email, \"doctor_department\":doctor_department, \"doctor_specialization\":doctor_specialization, } html_message = render_to_string('hospital_admin/accept-doctor-mail.html', {'values': values}) plain_message = strip_tags(html_message) try: send_mail(subject, plain_message, 'hospital_admin@gmail.com', [doctor_email], html_message=html_message, fail_silently=False) except BadHeaderError: return HttpResponse('Invalid header found') messages.success(request, 'Doctor Accepted!') return redirect('register-doctor-list') def reject_doctor(request,pk): doctor = Doctor_Information.objects.get(doctor_id=pk) doctor.register_status = 'Rejected' doctor.save() # Mailtrap doctor_name = doctor.name doctor_email = doctor.email doctor_department = doctor.department_name.hospital_department_name doctor_hospital = doctor.hospital_name.name doctor_specialization = doctor.specialization.specialization_name subject = \"Rejection of Doctor Registration\" values = { \"doctor_name\":doctor_name, \"doctor_email\":doctor_email, \"doctor_department\":doctor_department, \"doctor_hospital\":doctor_hospital, \"doctor_specialization\":doctor_specialization, } html_message = render_to_string('hospital_admin/reject-doctor-mail.html', {'values': values}) plain_message = strip_tags(html_message) try: send_mail(subject, plain_message, 'hospital_admin@gmail.com', [doctor_email], html_message=html_message, fail_silently=False) except BadHeaderError: return HttpResponse('Invalid header found') messages.success(request, 'Doctor Rejected!') return redirect('register-doctor-list')","title":"Accept/Reject doctor"},{"location":"hospital_admin/#add-and-view-labworker","text":"def add_lab_worker(request): if request.user.is_hospital_admin: user = Admin_Information.objects.get(user=request.user) form = LabWorkerCreationForm() if request.method == 'POST': form = LabWorkerCreationForm(request.POST) if form.is_valid(): # form.save(), commit=False --> don't save to database yet (we have a chance to modify object) user = form.save(commit=False) user.is_labworker = True user.save() messages.success(request, 'Clinical Laboratory Technician account was created!') # After user is created, we can log them in #login(request, user) return redirect('lab-worker-list') else: messages.error(request, 'An error has occurred during registration') context = {'form': form, 'admin': user} return render(request, 'hospital_admin/add-lab-worker.html', context)","title":"Add and View Labworker"},{"location":"hospital_admin/#add-and-view-pharmacist","text":"def add_pharmacist(request): if request.user.is_hospital_admin: user = Admin_Information.objects.get(user=request.user) form = PharmacistCreationForm() if request.method == 'POST': form = PharmacistCreationForm(request.POST) if form.is_valid(): # form.save(), commit=False --> don't save to database yet (we have a chance to modify object) user = form.save(commit=False) user.is_pharmacist = True user.save() messages.success(request, 'Pharmacist account was created!') # After user is created, we can log them in #login(request, user) return redirect('pharmacist-list') else: messages.error(request, 'An error has occurred during registration') context = {'form': form, 'admin': user} return render(request, 'hospital_admin/add-pharmacist.html', context)","title":"Add and View Pharmacist"},{"location":"hospital_admin/#addedit-and-view-hospital","text":"def add_hospital(request): if request.user.is_hospital_admin: user = Admin_Information.objects.get(user=request.user) if request.method == 'POST': hospital = Hospital_Information() if 'featured_image' in request.FILES: featured_image = request.FILES['featured_image'] else: featured_image = \"departments/default.png\" hospital_name = request.POST.get('hospital_name') address = request.POST.get('address') description = request.POST.get('description') email = request.POST.get('email') phone_number = request.POST.get('phone_number') hospital_type = request.POST.get('type') specialization_name = request.POST.getlist('specialization') department_name = request.POST.getlist('department') service_name = request.POST.getlist('service') hospital.name = hospital_name hospital.description = description hospital.address = address hospital.email = email hospital.phone_number =phone_number hospital.featured_image=featured_image hospital.hospital_type=hospital_type # print(department_name[0]) hospital.save() for i in range(len(department_name)): departments = hospital_department(hospital=hospital) # print(department_name[i]) departments.hospital_department_name = department_name[i] departments.save() for i in range(len(specialization_name)): specializations = specialization(hospital=hospital) specializations.specialization_name=specialization_name[i] specializations.save() for i in range(len(service_name)): services = service(hospital=hospital) services.service_name = service_name[i] services.save() messages.success(request, 'Hospital Added') return redirect('hospital-list') context = { 'admin': user} return render(request, 'hospital_admin/add-hospital.html',context)","title":"Add,Edit and View Hospital"},{"location":"hospital_admin/#edit-hospital-information","text":"def edit_hospital(request, pk): if request.user.is_hospital_admin: user = Admin_Information.objects.get(user=request.user) hospital = Hospital_Information.objects.get(hospital_id=pk) old_featured_image = hospital.featured_image if request.method == 'GET': specializations = specialization.objects.filter(hospital=hospital) services = service.objects.filter(hospital=hospital) departments = hospital_department.objects.filter(hospital=hospital) context = {'hospital': hospital, 'specializations': specializations, 'services': services,'departments':departments, 'admin': user} return render(request, 'hospital_admin/edit-hospital.html',context) elif request.method == 'POST': if 'featured_image' in request.FILES: featured_image = request.FILES['featured_image'] else: featured_image = old_featured_image hospital_name = request.POST.get('hospital_name') address = request.POST.get('address') description = request.POST.get('description') email = request.POST.get('email') phone_number = request.POST.get('phone_number') hospital_type = request.POST.get('type') specialization_name = request.POST.getlist('specialization') department_name = request.POST.getlist('department') service_name = request.POST.getlist('service') hospital.name = hospital_name hospital.description = description hospital.address = address hospital.email = email hospital.phone_number =phone_number hospital.featured_image =featured_image hospital.hospital_type =hospital_type # specializations.specialization_name=specialization_name # services.service_name = service_name # departments.hospital_department_name = department_name hospital.save() # Specialization for i in range(len(specialization_name)): specializations = specialization(hospital=hospital) specializations.specialization_name = specialization_name[i] specializations.save() # Experience for i in range(len(service_name)): services = service(hospital=hospital) services.service_name = service_name[i] services.save() for i in range(len(department_name)): departments = hospital_department(hospital=hospital) departments.hospital_department_name = department_name[i] departments.save() messages.success(request, 'Hospital Updated') return redirect('hospital-list')","title":"Edit Hospital Information"},{"location":"page2/","text":"ABOUT US Healthstack is an internet platform that supports numerous hospitals. It offers urgent medical aid to those in need of emergency care. Its capability of tracking, monitoring, and sharing a patient's health records across all hospitals. Patients can also view information about various hospitals and providers and schedule appointments online.","title":"ABOUT"},{"location":"page2/#about-us","text":"Healthstack is an internet platform that supports numerous hospitals. It offers urgent medical aid to those in need of emergency care. Its capability of tracking, monitoring, and sharing a patient's health records across all hospitals. Patients can also view information about various hospitals and providers and schedule appointments online.","title":"ABOUT US"},{"location":"patient/","text":"Welcome to Patient Dashboard The main services a patient avail: Visit multiple hospital, get emargency information of a hospital, and also gets doctor information. Search departmant Book doctor appointment Search Doctor View Prescription Book tests and pay online View Report history Profile edit Get mail for appointment and payment Medical Shop, Search Medicine, and buy Medicine View hospital Information def hospital_profile(request, pk): if request.user.is_authenticated: if request.user.is_patient: patient = Patient.objects.get(user=request.user) doctors = Doctor_Information.objects.all() hospitals = Hospital_Information.objects.get(hospital_id=pk) departments = hospital_department.objects.filter(hospital=hospitals) specializations = specialization.objects.filter(hospital=hospitals) services = service.objects.filter(hospital=hospitals) context = {'patient': patient, 'doctors': doctors, 'hospitals': hospitals, 'departments': departments, 'specializations': specializations, 'services': services} return render(request, 'hospital-profile.html', context) elif request.user.is_doctor: doctor = Doctor_Information.objects.get(user=request.user) hospitals = Hospital_Information.objects.get(hospital_id=pk) departments = hospital_department.objects.filter(hospital=hospitals) specializations = specialization.objects.filter(hospital=hospitals) services = service.objects.filter(hospital=hospitals) context = {'doctor': doctor, 'hospitals': hospitals, 'departments': departments, 'specializations': specializations, 'services': services} return render(request, 'hospital-profile.html', context) else: logout(request) messages.error(request, 'Not Authorized') return render(request, 'patient-login.html') View Multiple Hospital Information View hospital Doctor Information def hospital_doctor_list(request, pk): if request.user.is_authenticated and request.user.is_patient: # patient = Patient.objects.get(user_id=pk) patient = Patient.objects.get(user=request.user) departments = hospital_department.objects.get(hospital_department_id=pk) doctors = Doctor_Information.objects.filter(department_name=departments) doctors, search_query = searchDepartmentDoctors(request, pk) context = {'patient': patient, 'department': departments, 'doctors': doctors, 'search_query': search_query, 'pk_id': pk} return render(request, 'hospital-doctor-list.html', context) elif request.user.is_authenticated and request.user.is_doctor: # patient = Patient.objects.get(user_id=pk) doctor = Doctor_Information.objects.get(user=request.user) departments = hospital_department.objects.get(hospital_department_id=pk) doctors = Doctor_Information.objects.filter(department_name=departments) doctors, search_query = searchDepartmentDoctors(request, pk) context = {'doctor':doctor, 'department': departments, 'doctors': doctors, 'search_query': search_query, 'pk_id': pk} return render(request, 'hospital-doctor-list.html', context) else: logout(request) messages.error(request, 'Not Authorized') return render(request, 'patient-login.html') Doctor Information Page View hospital Doctor Information def booking(request, pk): patient = request.user.patient doctor = Doctor_Information.objects.get(doctor_id=pk) if request.method == 'POST': appointment = Appointment(patient=patient, doctor=doctor) date = request.POST['appoint_date'] time = request.POST['appoint_time'] appointment_type = request.POST['appointment_type'] message = request.POST['message'] transformed_date = datetime.datetime.strptime(date, '%m/%d/%Y').strftime('%Y-%m-%d') transformed_date = str(transformed_date) appointment.date = transformed_date appointment.time = time appointment.appointment_status = 'pending' appointment.serial_number = generate_random_string() appointment.appointment_type = appointment_type appointment.message = message appointment.save() if message: # Mailtrap patient_email = appointment.patient.email patient_name = appointment.patient.name patient_username = appointment.patient.username patient_phone_number = appointment.patient.phone_number doctor_name = appointment.doctor.name subject = \"Appointment Request\" values = { \"email\":patient_email, \"name\":patient_name, \"username\":patient_username, \"phone_number\":patient_phone_number, \"doctor_name\":doctor_name, \"message\":message, } html_message = render_to_string('appointment-request-mail.html', {'values': values}) plain_message = strip_tags(html_message) try: send_mail(subject, plain_message, 'hospital_admin@gmail.com', [patient_email], html_message=html_message, fail_silently=False) except BadHeaderError: return HttpResponse('Invalid header found') messages.success(request, 'Appointment Booked') return redirect('patient-dashboard') context = {'patient': patient, 'doctor': doctor} return render(request, 'booking.html', context) Book Doctor Appointment Page View Prescription Information def prescription_view(request,pk): if request.user.is_patient: patient = Patient.objects.get(user=request.user) prescription = Prescription.objects.filter(prescription_id=pk) prescription_medicine = Prescription_medicine.objects.filter(prescription__in=prescription) prescription_test = Prescription_test.objects.filter(prescription__in=prescription) context = {'patient':patient,'prescription':prescription,'prescription_test':prescription_test,'prescription_medicine':prescription_medicine} return render(request, 'prescription-view.html',context) else: redirect('logout') Prescription Page View Test Payment Method def test_cart(request, pk): if request.user.is_authenticated and request.user.is_patient: # prescription = Prescription.objects.filter(prescription_id=pk) prescription = Prescription.objects.filter(prescription_id=pk) patient = Patient.objects.get(user=request.user) prescription_test = Prescription_test.objects.all() test_carts = testCart.objects.filter(user=request.user, purchased=False) test_orders = testOrder.objects.filter(user=request.user, ordered=False) if test_carts.exists() and test_orders.exists(): test_order = test_orders[0] context = {'test_carts': test_carts,'test_order': test_order, 'patient': patient, 'prescription_test':prescription_test, 'prescription_id':pk} return render(request, 'test-cart.html', context) else: # messages.warning(request, \"You don't have any test in your cart!\") context = {'patient': patient,'prescription_test':prescription_test} return render(request, 'prescription-view.html', context) else: logout(request) messages.info(request, 'Not Authorized') return render(request, 'patient-login.html') Payment Page View Report History def view_report(request,pk): if request.user.is_patient: patient = Patient.objects.get(user=request.user) report = Report.objects.filter(report_id=pk) specimen = Specimen.objects.filter(report__in=report) test = Test.objects.filter(report__in=report) # current_date = datetime.date.today() context = {'patient':patient,'report':report,'test':test,'specimen':specimen} return render(request, 'view-report.html',context) else: redirect('logout') Report View View Medical Shop def pharmacy_shop(request): if request.user.is_authenticated and request.user.is_patient: patient = Patient.objects.get(user=request.user) medicines = Medicine.objects.all() orders = Order.objects.filter(user=request.user, ordered=False) carts = Cart.objects.filter(user=request.user, purchased=False) medicines, search_query = searchMedicines(request) if carts.exists() and orders.exists(): order = orders[0] context = {'patient': patient, 'medicines': medicines,'carts': carts,'order': order, 'orders': orders, 'search_query': search_query} return render(request, 'Pharmacy/shop.html', context) else: context = {'patient': patient, 'medicines': medicines,'carts': carts,'orders': orders, 'search_query': search_query} return render(request, 'Pharmacy/shop.html', context) else: logout(request) messages.error(request, 'Not Authorized') return render(request, 'patient-login.html') Medical Shop Page Medical Shop Cart def cart_view(request): if request.user.is_authenticated and request.user.is_patient: patient = Patient.objects.get(user=request.user) medicines = Medicine.objects.all() carts = Cart.objects.filter(user=request.user, purchased=False) orders = Order.objects.filter(user=request.user, ordered=False) if carts.exists() and orders.exists(): order = orders[0] context = {'carts': carts,'order': order} return render(request, 'Pharmacy/cart.html', context) else: messages.warning(request, \"You don't have any item in your cart!\") context = {'patient': patient,'medicines': medicines} return render(request, 'pharmacy/shop.html', context) else: logout(request) messages.info(request, 'Not Authorized') return render(request, 'patient-login.html') Medical Shop cart page","title":"Patient Dashboard"},{"location":"patient/#welcome-to-patient-dashboard","text":"","title":"Welcome to Patient Dashboard"},{"location":"patient/#the-main-services-a-patient-avail","text":"Visit multiple hospital, get emargency information of a hospital, and also gets doctor information. Search departmant Book doctor appointment Search Doctor View Prescription Book tests and pay online View Report history Profile edit Get mail for appointment and payment Medical Shop, Search Medicine, and buy Medicine","title":"The main services a patient avail:"},{"location":"patient/#view-hospital-information","text":"def hospital_profile(request, pk): if request.user.is_authenticated: if request.user.is_patient: patient = Patient.objects.get(user=request.user) doctors = Doctor_Information.objects.all() hospitals = Hospital_Information.objects.get(hospital_id=pk) departments = hospital_department.objects.filter(hospital=hospitals) specializations = specialization.objects.filter(hospital=hospitals) services = service.objects.filter(hospital=hospitals) context = {'patient': patient, 'doctors': doctors, 'hospitals': hospitals, 'departments': departments, 'specializations': specializations, 'services': services} return render(request, 'hospital-profile.html', context) elif request.user.is_doctor: doctor = Doctor_Information.objects.get(user=request.user) hospitals = Hospital_Information.objects.get(hospital_id=pk) departments = hospital_department.objects.filter(hospital=hospitals) specializations = specialization.objects.filter(hospital=hospitals) services = service.objects.filter(hospital=hospitals) context = {'doctor': doctor, 'hospitals': hospitals, 'departments': departments, 'specializations': specializations, 'services': services} return render(request, 'hospital-profile.html', context) else: logout(request) messages.error(request, 'Not Authorized') return render(request, 'patient-login.html')","title":"View hospital Information"},{"location":"patient/#view-multiple-hospital-information","text":"","title":"View Multiple Hospital Information"},{"location":"patient/#view-hospital-doctor-information","text":"def hospital_doctor_list(request, pk): if request.user.is_authenticated and request.user.is_patient: # patient = Patient.objects.get(user_id=pk) patient = Patient.objects.get(user=request.user) departments = hospital_department.objects.get(hospital_department_id=pk) doctors = Doctor_Information.objects.filter(department_name=departments) doctors, search_query = searchDepartmentDoctors(request, pk) context = {'patient': patient, 'department': departments, 'doctors': doctors, 'search_query': search_query, 'pk_id': pk} return render(request, 'hospital-doctor-list.html', context) elif request.user.is_authenticated and request.user.is_doctor: # patient = Patient.objects.get(user_id=pk) doctor = Doctor_Information.objects.get(user=request.user) departments = hospital_department.objects.get(hospital_department_id=pk) doctors = Doctor_Information.objects.filter(department_name=departments) doctors, search_query = searchDepartmentDoctors(request, pk) context = {'doctor':doctor, 'department': departments, 'doctors': doctors, 'search_query': search_query, 'pk_id': pk} return render(request, 'hospital-doctor-list.html', context) else: logout(request) messages.error(request, 'Not Authorized') return render(request, 'patient-login.html')","title":"View hospital Doctor Information"},{"location":"patient/#doctor-information-page","text":"","title":"Doctor Information Page"},{"location":"patient/#view-hospital-doctor-information_1","text":"def booking(request, pk): patient = request.user.patient doctor = Doctor_Information.objects.get(doctor_id=pk) if request.method == 'POST': appointment = Appointment(patient=patient, doctor=doctor) date = request.POST['appoint_date'] time = request.POST['appoint_time'] appointment_type = request.POST['appointment_type'] message = request.POST['message'] transformed_date = datetime.datetime.strptime(date, '%m/%d/%Y').strftime('%Y-%m-%d') transformed_date = str(transformed_date) appointment.date = transformed_date appointment.time = time appointment.appointment_status = 'pending' appointment.serial_number = generate_random_string() appointment.appointment_type = appointment_type appointment.message = message appointment.save() if message: # Mailtrap patient_email = appointment.patient.email patient_name = appointment.patient.name patient_username = appointment.patient.username patient_phone_number = appointment.patient.phone_number doctor_name = appointment.doctor.name subject = \"Appointment Request\" values = { \"email\":patient_email, \"name\":patient_name, \"username\":patient_username, \"phone_number\":patient_phone_number, \"doctor_name\":doctor_name, \"message\":message, } html_message = render_to_string('appointment-request-mail.html', {'values': values}) plain_message = strip_tags(html_message) try: send_mail(subject, plain_message, 'hospital_admin@gmail.com', [patient_email], html_message=html_message, fail_silently=False) except BadHeaderError: return HttpResponse('Invalid header found') messages.success(request, 'Appointment Booked') return redirect('patient-dashboard') context = {'patient': patient, 'doctor': doctor} return render(request, 'booking.html', context)","title":"View hospital Doctor Information"},{"location":"patient/#book-doctor-appointment-page","text":"","title":"Book Doctor Appointment Page"},{"location":"patient/#view-prescription-information","text":"def prescription_view(request,pk): if request.user.is_patient: patient = Patient.objects.get(user=request.user) prescription = Prescription.objects.filter(prescription_id=pk) prescription_medicine = Prescription_medicine.objects.filter(prescription__in=prescription) prescription_test = Prescription_test.objects.filter(prescription__in=prescription) context = {'patient':patient,'prescription':prescription,'prescription_test':prescription_test,'prescription_medicine':prescription_medicine} return render(request, 'prescription-view.html',context) else: redirect('logout')","title":"View Prescription Information"},{"location":"patient/#prescription-page","text":"","title":"Prescription Page"},{"location":"patient/#view-test-payment-method","text":"def test_cart(request, pk): if request.user.is_authenticated and request.user.is_patient: # prescription = Prescription.objects.filter(prescription_id=pk) prescription = Prescription.objects.filter(prescription_id=pk) patient = Patient.objects.get(user=request.user) prescription_test = Prescription_test.objects.all() test_carts = testCart.objects.filter(user=request.user, purchased=False) test_orders = testOrder.objects.filter(user=request.user, ordered=False) if test_carts.exists() and test_orders.exists(): test_order = test_orders[0] context = {'test_carts': test_carts,'test_order': test_order, 'patient': patient, 'prescription_test':prescription_test, 'prescription_id':pk} return render(request, 'test-cart.html', context) else: # messages.warning(request, \"You don't have any test in your cart!\") context = {'patient': patient,'prescription_test':prescription_test} return render(request, 'prescription-view.html', context) else: logout(request) messages.info(request, 'Not Authorized') return render(request, 'patient-login.html')","title":"View Test Payment Method"},{"location":"patient/#payment-page","text":"","title":"Payment Page"},{"location":"patient/#view-report-history","text":"def view_report(request,pk): if request.user.is_patient: patient = Patient.objects.get(user=request.user) report = Report.objects.filter(report_id=pk) specimen = Specimen.objects.filter(report__in=report) test = Test.objects.filter(report__in=report) # current_date = datetime.date.today() context = {'patient':patient,'report':report,'test':test,'specimen':specimen} return render(request, 'view-report.html',context) else: redirect('logout')","title":"View Report History"},{"location":"patient/#report-view","text":"","title":"Report View"},{"location":"patient/#view-medical-shop","text":"def pharmacy_shop(request): if request.user.is_authenticated and request.user.is_patient: patient = Patient.objects.get(user=request.user) medicines = Medicine.objects.all() orders = Order.objects.filter(user=request.user, ordered=False) carts = Cart.objects.filter(user=request.user, purchased=False) medicines, search_query = searchMedicines(request) if carts.exists() and orders.exists(): order = orders[0] context = {'patient': patient, 'medicines': medicines,'carts': carts,'order': order, 'orders': orders, 'search_query': search_query} return render(request, 'Pharmacy/shop.html', context) else: context = {'patient': patient, 'medicines': medicines,'carts': carts,'orders': orders, 'search_query': search_query} return render(request, 'Pharmacy/shop.html', context) else: logout(request) messages.error(request, 'Not Authorized') return render(request, 'patient-login.html')","title":"View Medical Shop"},{"location":"patient/#medical-shop-page","text":"","title":"Medical Shop Page"},{"location":"patient/#medical-shop-cart","text":"def cart_view(request): if request.user.is_authenticated and request.user.is_patient: patient = Patient.objects.get(user=request.user) medicines = Medicine.objects.all() carts = Cart.objects.filter(user=request.user, purchased=False) orders = Order.objects.filter(user=request.user, ordered=False) if carts.exists() and orders.exists(): order = orders[0] context = {'carts': carts,'order': order} return render(request, 'Pharmacy/cart.html', context) else: messages.warning(request, \"You don't have any item in your cart!\") context = {'patient': patient,'medicines': medicines} return render(request, 'pharmacy/shop.html', context) else: logout(request) messages.info(request, 'Not Authorized') return render(request, 'patient-login.html')","title":"Medical Shop Cart"},{"location":"patient/#medical-shop-cart-page","text":"","title":"Medical Shop cart page"}]}